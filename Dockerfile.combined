# Build frontend
FROM node:20-alpine AS frontend-builder
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
COPY .env .env
RUN npm run build

# Build backend
FROM python:3.11-slim AS backend
WORKDIR /backend

# Install system dependencies
RUN apt-get update && \
    apt-get install -y \
        build-essential \
        curl \
        nginx \
        supervisor \
        gettext-base && \
    rm -rf /var/lib/apt/lists/*

# Copy Python requirements and install
COPY py_backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy Python backend code
COPY py_backend/ .

# Copy frontend build
COPY --from=frontend-builder /app/dist /usr/share/nginx/html

# Copy nginx config
COPY nginx.conf.template /etc/nginx/conf.d/default.conf.template

# Create supervisor config
RUN echo "[supervisord]\n\
nodaemon=true\n\
\n\
[program:backend]\n\
command=python /backend/main.py --host 0.0.0.0 --port 5000\n\
directory=/backend\n\
autostart=true\n\
autorestart=true\n\
stderr_logfile=/var/log/backend.err.log\n\
stdout_logfile=/var/log/backend.out.log\n\
\n\
[program:nginx]\n\
command=/bin/bash -c 'envsubst \"\$PORT\" < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && nginx -g \"daemon off;\"'\n\
autostart=true\n\
autorestart=true\n\
stderr_logfile=/var/log/nginx.err.log\n\
stdout_logfile=/var/log/nginx.out.log" > /etc/supervisor/conf.d/supervisord.conf

# Create startup script
RUN echo "#!/bin/bash\n\
export PORT=\${PORT:-8080}\n\
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf" > /start.sh && \
chmod +x /start.sh

EXPOSE ${PORT}

CMD ["/start.sh"]